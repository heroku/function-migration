basePath: /api
definitions:
  Animal:
    discriminator: type
    properties:
      id:
        type: integer
      type:
        type: string
    required:
      - id
      - type
  Cat:
    allOf:
      - properties:
          likesMilk:
            type: boolean
        required:
          - likesMilk
      - $ref: '#/definitions/Animal'
  Category:
    properties:
      id:
        format: int64
        type: integer
      name:
        type: string
  Pet:
    properties:
      category:
        $ref: '#/definitions/Category'
      id:
        default: 1
        description: unique identifier for the pet
        format: int64
        maximum: 100
        minimum: 0
        type: integer
      name:
        type: string
      photoUrls:
        items:
          type: string
        type: array
      status:
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
        type: string
      tags:
        items:
          $ref: '#/definitions/Tag'
        type: array
    required:
      - id
      - name
  Tag:
    properties:
      id:
        format: int64
        type: integer
      name:
        type: string
host: petstore.swagger.wordnik.com
info:
  title: petstore.swagger.wordnik.com
  version: 1.0.0
paths:
  /pet:
    put:
      operationId: updatePet
      parameters:
        - description: Pet object that needs to be updated in the store
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Pet'
      produces:
        - application/json
        - application/xml
        - text/plain
        - text/html
      responses:
        '200':
          description: No response was specified
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      summary: Update an existing pet
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      parameters:
        - description: Status values that need to be considered for filter
          in: query
          items:
            enum:
              - available
              - pending
              - sold
            type: string
          name: status
          required: true
          type: array
      produces:
        - application/json
        - application/xml
        - text/plain
        - text/html
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/Pet'
            type: array
        '400':
          description: Invalid status value
      summary: Finds Pets by status
  /pet/findByTags:
    get:
      deprecated: true
      description: >-
        Muliple tags can be provided with comma seperated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - description: Tags to filter by
          in: query
          items:
            type: string
          name: tags
          required: true
          type: array
      produces:
        - application/json
        - application/xml
        - text/plain
        - text/html
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/Pet'
            type: array
        '400':
          description: Invalid tag value
      summary: Finds Pets by tags
  /pet/uploadImage:
    post:
      consumes:
        - multipart/form-data
      operationId: uploadFile
      parameters:
        - description: Additional data to pass to server
          in: formData
          name: additionalMetadata
          required: false
          type: string
        - description: file to upload
          in: formData
          name: file
          required: false
          type: file
      produces:
        - application/json
        - application/xml
        - text/plain
        - text/html
      responses:
        '200':
          description: No response was specified
      security:
        - oauth2:
            - 'write:pets'
            - 'read:pets'
      summary: uploads an image
  '/pet/{petId}':
    delete:
      operationId: deletePet
      parameters:
        - description: Pet id to delete
          in: path
          name: petId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
        - text/plain
        - text/html
      responses:
        '200':
          description: No response was specified
        '400':
          description: Invalid pet value
      security:
        - oauth2:
            - 'write:pets'
      summary: Deletes a pet
    get:
      description: Returns a pet based on ID
      operationId: getPetById
      parameters:
        - default: 1
          description: ID of pet that needs to be fetched
          format: int64
          in: path
          maximum: 100000
          minimum: 1
          name: petId
          required: true
          type: integer
      produces:
        - application/json
        - application/xml
        - text/plain
        - text/html
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      summary: Find pet by ID
    patch:
      consumes:
        - application/json
        - application/xml
      operationId: partialUpdate
      parameters:
        - description: ID of pet that needs to be fetched
          in: path
          name: petId
          required: true
          type: string
        - description: Pet object that needs to be added to the store
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Pet'
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/Pet'
            type: array
        '400':
          description: Invalid tag value
      security:
        - oauth2:
            - 'write:pets'
      summary: partial updates to a pet
    post:
      consumes:
        - application/x-www-form-urlencoded
      operationId: updatePetWithForm
      parameters:
        - description: ID of pet that needs to be updated
          in: path
          name: petId
          required: true
          type: string
        - description: Updated name of the pet
          in: formData
          name: name
          required: false
          type: string
        - description: Updated status of the pet
          in: formData
          name: status
          required: false
          type: string
      produces:
        - application/json
        - application/xml
        - text/plain
        - text/html
      responses:
        '200':
          description: No response was specified
        '405':
          description: Invalid input
      security:
        - oauth2:
            - 'write:pets'
      summary: Updates a pet in the store with form data
schemes:
  - http
swagger: '2.0'

